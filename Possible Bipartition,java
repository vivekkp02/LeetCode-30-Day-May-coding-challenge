/*
Given a set of N people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size.
Each person may dislike some other people, and they should not go into the same group. 
Formally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.
Return true if and only if it is possible to split everyone into two groups in this way.

Example 1:
Input: N = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4], group2 [2,3]

Example 2:
Input: N = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false

Example 3:
Input: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false
 
Constraints:
1 <= N <= 2000
0 <= dislikes.length <= 10000
dislikes[i].length == 2
1 <= dislikes[i][j] <= N
dislikes[i][0] < dislikes[i][1]
There does not exist i != j for which dislikes[i] == dislikes[j].

https://www.youtube.com/watch?v=hWFqtlbnQV8
*/

class Solution {
    public boolean possibleBipartition(int N, int[][] dislikes) {
        int groups[] = new int[N];
        Arrays.fill(groups, -1);
        
        ArrayList<Integer>[] adj = new ArrayList[N];
        for(int i=0; i<N; i++)
            adj[i] = new ArrayList<>();
        
        // building adj list
        for(int[] conn : dislikes){
            adj[conn[0]-1].add(conn[1]-1);
            adj[conn[1]-1].add(conn[0]-1);     
        }
        
        for(int i=0; i<N; i++){
            if(groups[i] == -1 && !dfs(adj, groups, i, 0)){
                return false;
            }
        }
        return true;
    }
    
    boolean dfs(ArrayList<Integer>[] adj, int[] groups, int v, int grp){
        if(groups[v]==-1)
            groups[v]=grp;
        else
            return groups[v]==grp;
        
        // dfs
        for(int neighbour : adj[v]){
            // dfs with flip value of grp for neighbour
            if(!dfs(adj, groups, neighbour, 1-grp)){
                return false;
            }
        }
        return true;
    }
}
